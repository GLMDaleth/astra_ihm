/* eslint-disable @typescript-eslint/no-namespace */

import type { ExtensionContext as BaseExtensionContext } from "./stable";

/**
 * The experimental namespace contains experimental APIs that are not yet stable and WILL change or
 * be REMOVED at any time.
 *
 * These APIS are provided for isolated testing and feedback.You should avoid shipping org
 * extensions which depend on them because they WILL break in different versions of Foxglove and
 * can be CHANGED or REMOVED at any time.
 *
 * @hidden
 */
export namespace Experimental {
  /**
   * This type represents the arguments you pass to {@link ExtensionContext.registerDataLoader}
   * when you want to register a data loader.
   *
   * @category Data loaders
   */
  export type RegisterLocalFileDataLoaderArgs = {
    /** The type of data loader. Must be "file" for local file data loaders. */
    type: "file";
    /** The URL to the WebAssembly module for this data loader. */
    wasmUrl: string;
    /** The file extension that this data loader should be associated with. */
    supportedFileType: `.${string}`;
  };

  /**
   * Arguments for registering a custom data loader. Currently, only local file data loaders are
   * supported.
   *
   * See: {@link RegisterLocalFileDataLoaderArgs}
   *
   * @category Data loaders
   */
  export type RegisterDataLoaderArgs = RegisterLocalFileDataLoaderArgs;

  export interface ExtensionContext extends BaseExtensionContext {
    /**
     * Register a data loader to add support for additional file formats.
     *
     * A data loader teaches Foxglove how to read new file formats. The data loader is a WASM layer
     * that bridges the semantics of the custom file format to Foxglove.
     *
     * See: {@link RegisterDataLoaderArgs}
     */
    registerDataLoader(args: RegisterDataLoaderArgs): void;
  }

  export interface ExtensionModule {
    /**
     * This function will be called when your extension is loaded. In this function, you can register
     * your custom panels or other types of extension features.
     */
    activate: ExtensionActivate;
  }

  export type ExtensionActivate = (extensionContext: ExtensionContext) => void;
}
